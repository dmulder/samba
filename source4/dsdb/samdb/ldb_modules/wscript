
import sys
from waflib import Logs, Options
import samba3

def options(opt):
    help =  "Build with gpgme support (default=auto). "
    help += "This requires gpgme devel and python packages "
    help += "(e.g. libgpgme11-dev, python-gpgme on debian/ubuntu)."

    opt.SAMBA3_ADD_OPTION('gpgme', default=None, help=(help))

    return

def configure(conf):
    conf.SET_TARGET_TYPE('nettle', 'EMPTY')
    if conf.CHECK_CFG(
        package="nettle",
        args="--cflags --libs",
        msg='Checking for nettle support'):

        if conf.CHECK_FUNCS_IN(
            'nettle_gcm_aes_encrypt',
            'nettle',
            headers='nettle/gcm.h'):

            conf.DEFINE('HAVE_NETTLE_AES_GCM', '1')
        else:
            Logs.warn('No nettle support for AES GCM')
    else:
        Logs.warn('No nettle encryption libraries')

    if conf.env.HAVE_GNUTLS:
        if conf.CHECK_FUNCS_IN(
            'gnutls_aead_cipher_init',
            'gnutls',
            headers='gnutls/gnutls.h'):

                conf.DEFINE('HAVE_GNUTLS_AEAD', '1')
        else:
            Logs.warn('No gnutls support for AEAD encryption')

    if not conf.env.HAVE_GNUTLS_AEAD and not conf.env.HAVE_NETTLE_AES_GCM:
        conf.fatal("No AES GCM AEAD support"
                   "Try installing gnutls if that does not support AEAD "
                   "try installing nettle-dev or nettle-devel")

    conf.SET_TARGET_TYPE('gpgme', 'EMPTY')

    if Options.options.with_gpgme != False:
        conf.find_program('gpgme-config', var='GPGME_CONFIG')

        if conf.env.GPGME_CONFIG:
            conf.CHECK_CFG(path=conf.env.GPGME_CONFIG, args="--cflags --libs",
                           package="", uselib_store="gpgme",
                           msg='Checking for gpgme support')

        if conf.CHECK_FUNCS_IN('gpgme_new', 'gpgme', headers='gpgme.h'):
            conf.DEFINE('ENABLE_GPGME', '1')

        if not conf.CONFIG_SET('ENABLE_GPGME'):
            if Options.options.with_gpgme == True:
                conf.fatal('GPGME support requested, but no suitable GPGME library found, eg libgpgme11-dev and python-gpgme')
            else:
                Logs.warn('no suitable GPGME library found')
