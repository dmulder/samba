#!/usr/bin/env python
# Copyright Luke Morrison <luc785@.hotmail.com> 2013
'''This script reads log file of previous GPO, gets all GPO from sysvol, sorts them by container, and applies the ones that have not been applied, have changed, or is in the right container'''
import os
import fcntl
import sys
import tempfile
import subprocess

sys.path.insert(0, "bin/python")

import samba
import optparse
from samba import getopt as options
from samba.gpclass import *

#Finds all GPO Files ending in inf
def gp_path_list(path):

	GPO_LIST = []
	for ext in gp_extensions:
		GPO_LIST.append((ext, ext.list(path)))

	return GPO_LIST

#Reads the GPOs and sends them to their proper handlers
def gpo_parser(GPO_LIST, ldb):
	for entry in GPO_LIST:
		(ext, thefile) = entry
		ext.parse(thefile, ldb)


parser = optparse.OptionParser("testsearchdn [options]")

sambaopts = options.SambaOptions(parser)

parser.add_option_group(sambaopts)
parser.add_option_group(options.VersionOptions(parser))

credopts = options.CredentialsOptions(parser)

parser.add_option("-H", dest = "url", help="URL for the samdb")

parser.add_option_group(credopts)

opts, args = parser.parse_args()
lp = sambaopts.get_loadparm()

smbconf = lp.configfile
creds = credopts.get_credentials(lp)

session = system_session()

if not opts.url:
    url = lp.samdb_url()
else:
    url = opts.url

#########################
#Inialize Samba Database#
#########################
test_ldb = SamDB(url, session_info=session,
 credentials=creds,lp=lp)

schemadn = test_ldb.get_schema_basedn()

basedn = test_ldb.get_default_basedn()

'''Will need sysvol to write a basic GUID version dynamic log file'''
path = '%s/%s/%s' % (lp.get("path", "sysvol"), lp.get("realm"), 'Policies')
sys_log = '%s/%s' % (lp.get("path", "sysvol"), 'syslog.txt')

'''Returns dict from previous logfile, then scraps the logfile '''
previous_scanned_version = {'a' : 4}
if os.path.isfile(sys_log):
	previous_scanned_version = scan_log(sys_log)
sys_log = open(sys_log, "w")

'''Establishes the hierarchy TODO - insert the link fom Microsoft and vouch why we dont care about site or local'''
specific_ou = "OU=Domain Controllers"
'''TODO Definitely get DC from Samba'''
global_dn = test_ldb.domain_dn()
print 'The global DN for this domain is ' + global_dn
DC_OU = specific_ou + ',' + global_dn
guid_list = os.listdir(path)
#guid_list = establish_hierarchy(test_ldb, guid_list, DC_OU, global_dn)

hierarchy_gpos = samba4_gpo_hierarchy(test_ldb, guid_list, DC_OU, global_dn)
hierarchy_gpos.establish_hierarchy()


for guid_eval in hierarchy_gpos.sorted_full:
	guid = guid_eval[0]
	gp_extensions = [gp_sec_ext()]
	local_path = path + '/' + guid + '/'
	version = gpo.gpo_get_sysvol_gpt_version(local_path)[1]

	gpolist = gp_path_list(local_path)
	print local_path

	'''If an important GPO parse it. Will not parse if it has not changed, is empty, or is not in the right container'''
	if guid_eval[1]:
		if gpolist[0][1]:
			if (version != previous_scanned_version.get(guid)) and (version != 0):
				print ('GPO %s has changed' % guid)
				gpo_parser(gpolist, test_ldb)
	sys_log.write('%s %i\n' % (guid,version))
