#include "idl_types.h"

import "misc.idl";
import "security.idl";
import "frsrpc.idl";
import "bkupblobs.idl";
import "fscc.idl";
import "file_id.idl";
import "frstrans.idl";

/* FRS and DFS-R related blobs decoding. */

[
	pointer_default(unique),
	helpstring("dfsr and bkup blobs"),
	uuid("12345777-1234-abcd-0001-00000004")
]

interface frsblobs
{
	typedef [v1_enum,public] enum {
		MS_TYPE_META_DATA = 0x00000001,
		MS_TYPE_COMPRESSION_DATA = 0x00000002,
		MS_TYPE_REPARSE_DATA = 0x00000003,
		MS_TYPE_FLAT_DATA = 0x00000004,
		MS_TYPE_SECURITY_DATA = 0x00000006
	} dfsr_StreamType;

	typedef [v1_enum,public] enum {
		HEADER_FLAGS_END_OF_STREAM = 0x00000001
	} dfsr_StreamFlags;

	void  decode_nt_backup_file(
		[in] bkup_NTBackupFile file
	);

	void decode_frsrpc_StageHeader(
		[in] frsrpc_StageHeader header,
		[in] bkup_NTBackupFile data
	);

	void decode_FileNetworkOpenInformation(
		[in] fscc_FileNetworkOpenInformation data
	);

	typedef [public] struct {
		/* Just as reference, windows seems to store these fields:
		 * fid
		 * usn
		 * uidVisible
		 * filtered
		 * journalWrapped
		 * slowRecoverCheck
		 * pendingTombstone
		 * internalUpdate
		 * dirtyShutdownMismatch
		 * meetInstallUpdate
		 * meetReanimated
		 * recUpdateTime
		 * present
		 * nameConflict
		 * attributes
		 * ghostedHeader
		 * data
		 * gvsn
		 * uid
		 * parent
		 * fence
		 * clockDecrementedInDirtyShutdown
		 * clock
		 * createTime
		 * csId
		 * hash
		 * similarity
		 * name
		 */
		file_id fid;
		boolean32 meet_installed;
		frstrans_Update *update;
	} dfsr_db_record;

	typedef [public] struct {
		[in] uint32 vv_count;
		[in,size_is(vv_count)]
			frstrans_VersionVector *vv;
	} dfsr_db_vv_record;

	typedef [public] struct {
		[in,ref,charset(DOS),string] uint8 *staged_file;
		[in,ref,charset(DOS),string] uint8 *installing_dir;
		[in,ref,charset(DOS),string] uint8 *root_dir;
		[in,ref] frstrans_Update *update;
	} dfsr_meet_install_update;

	typedef [public] struct {
		NTSTATUS result;
	} dfsr_meet_update_installed;

	typedef [public] struct {
		[charset(DOS),value("XBLO")] uint8 header[4];
		uint32 compressed_size;
		uint32 uncompressed_size;
		[subcontext(0),subcontext_size(compressed_size),flag(NDR_REMAINING)] DATA_BLOB data;
	} dfsr_xpress_block;

	typedef [public] struct {
		dfsr_StreamType type;
		uint32 block_size;
		dfsr_StreamFlags flags;
	} dfsr_stream_header;

	typedef [public] struct {
		uint32 version;
		uint32 reserved1;
		fscc_FileBasicInformation info;
		uint16 sd_control;
		uint16 reserved2; /* reserved 2 is 6 bytes*/
		uint32 reserved21;
		hyper primary_data_stream_size;
		hyper reserved3;
	} dfsr_metadata;
}
